{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, MutableRefObject } from \"react\";\nimport {\n  GeocoderAutocomplete,\n  LocationType,\n  SupportedLanguage,\n  GeoPosition,\n  CountyCode,\n  ByCountryCodeOptions,\n  ByCircleOptions,\n  ByRectOptions,\n  ByProximityOptions,\n} from \"@geoapify/geocoder-autocomplete\";\n\nexport const GeoapifyApiKey = React.createContext<string>(\"\");\n\nexport const GeoapifyContext = (props: any) => {\n  return (\n    <GeoapifyApiKey.Provider value={props.apiKey}>\n      {props.children}\n    </GeoapifyApiKey.Provider>\n  );\n};\n\nexport interface GeoapifyGeocoderAutocompleteOptions {\n  value?: string;\n  type?: LocationType;\n  lang?: SupportedLanguage;\n  limit?: number;\n  placeholder?: string;\n  filterByCountryCode?: ByCountryCodeOptions;\n  filterByCircle?: ByCircleOptions;\n  filterByRect?: ByRectOptions;\n  biasByCountryCode?: ByCountryCodeOptions;\n  biasByCircle?: ByCircleOptions;\n  biasByRect?: ByRectOptions;\n  biasByProximity?: ByProximityOptions;\n  position?: GeoPosition;\n  countryCodes?: CountyCode[];\n\n  skipIcons?: boolean;\n  skipDetails?: boolean;\n\n  placeSelect: (value: any) => {};\n  suggestionsChange: (value: any) => {};\n\n  preprocessHook: (value: string) => string;\n  postprocessHook: (feature: any) => string;\n  suggestionsFilter: (suggestions: any[]) => any[];\n}\n\nexport const GeoapifyGeocoderAutocomplete = ({\n  placeholder: placeholderValue,\n  type: typeValue,\n  lang: langValue,\n  limit: limitValue,\n  value: valueValue,\n  filterByCountryCode: filterByCountryCodeValue,\n  filterByCircle: filterByCircleValue,\n  filterByRect: filterByRectValue,\n  biasByCountryCode: biasByCountryCodeValue,\n  biasByCircle: biasByCircleValue,\n  biasByRect: biasByRectValue,\n  biasByProximity: biasByProximityValue,\n  position: positionValue,\n  countryCodes: countryCodesValue,\n  skipIcons: skipIconsValue,\n  skipDetails: skipDetailsValue,\n  preprocessHook: preprocessHookValue,\n  postprocessHook: postprocessHookValue,\n  suggestionsFilter: suggestionsFilterValue,\n  placeSelect: placeSelectCallback,\n  suggestionsChange: suggestionsChangeCallback,\n}: GeoapifyGeocoderAutocompleteOptions) => {\n  const apiKey = React.useContext<string>(GeoapifyApiKey);\n  let geocoderContainer: HTMLDivElement | null;\n  let initialized: boolean = false;\n  let geocoderAutocomplete: MutableRefObject<\n    GeocoderAutocomplete | undefined\n  > = useRef<GeocoderAutocomplete>();\n\n  const placeSelectCallbackRef: MutableRefObject<\n    ((value: any) => {}) | undefined\n  > = useRef<(value: any) => {}>();\n  const suggestionsChangeCallbackRef: MutableRefObject<\n    ((value: any) => {}) | undefined\n  > = useRef<(value: any) => {}>();\n\n  placeSelectCallbackRef.current = placeSelectCallback;\n  suggestionsChangeCallbackRef.current =  suggestionsChangeCallback;\n\n  const onSelect = React.useCallback((value: any) => {\n    if (placeSelectCallbackRef.current) {\n      placeSelectCallbackRef.current(value);\n    }\n  },[]);\n\n  const onSuggestions = React.useCallback((value: any) => {\n    if (suggestionsChangeCallbackRef.current) {\n      suggestionsChangeCallbackRef.current(value);\n    }\n  },[]);\n\n  useEffect(() => {\n    if (initialized) {\n      if (geocoderAutocomplete.current) {\n        geocoderAutocomplete.current.off(\"select\", onSelect);\n        geocoderAutocomplete.current.off(\"suggestions\", onSuggestions);\n      }\n\n      return;\n    }\n\n    initialized = true;\n\n    geocoderAutocomplete.current = new GeocoderAutocomplete(\n      geocoderContainer as HTMLDivElement,\n      apiKey,\n      {\n        placeholder: placeholderValue || \"\",\n        skipDetails: skipDetailsValue,\n        skipIcons: skipIconsValue\n      }\n    );\n\n    geocoderAutocomplete.current.on(\"select\", onSelect);\n    geocoderAutocomplete.current.on(\"suggestions\", onSuggestions);\n  }, []);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setType(typeValue as LocationType);\n    }\n  }, [typeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLang(langValue as SupportedLanguage);\n    }\n  }, [langValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      console.warn(\n        \"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\"\n      );\n      geocoderAutocomplete.current.addBiasByProximity(\n        positionValue as GeoPosition\n      );\n    }\n  }, [positionValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      console.warn(\n        \"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\"\n      );\n      geocoderAutocomplete.current.addFilterByCountry(\n        countryCodesValue as CountyCode[]\n      );\n    }\n  }, [countryCodesValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLimit(limitValue as number);\n    }\n  }, [limitValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setValue((valueValue as string) || \"\");\n    }\n  }, [valueValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCountry(\n        filterByCountryCodeValue as ByCountryCodeOptions\n      );\n    }\n  }, [filterByCountryCodeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCircle(\n        filterByCircleValue as ByCircleOptions\n      );\n    }\n  }, [filterByCircleValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByRect(\n        filterByRectValue as ByRectOptions\n      );\n    }\n  }, [filterByRectValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCountry(\n        biasByCountryCodeValue as ByCountryCodeOptions\n      );\n    }\n  }, [biasByCountryCodeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCircle(\n        biasByCircleValue as ByCircleOptions\n      );\n    }\n  }, [biasByCircleValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByRect(\n        biasByRectValue as ByRectOptions\n      );\n    }\n  }, [biasByRectValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByProximity(\n        biasByProximityValue as ByProximityOptions\n      );\n    }\n  }, [biasByProximityValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPreprocessHook(\n        preprocessHookValue\n      );\n    }\n  }, [preprocessHookValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPostprocessHook(\n        postprocessHookValue\n      );\n    }\n  }, [postprocessHookValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setSuggestionsFilter(\n        suggestionsFilterValue\n      );\n    }\n  }, [suggestionsFilterValue]);\n\n  return (\n    <div\n      className=\"geocoder-container\"\n      style={{ position: \"relative\" }}\n      ref={(el) => (geocoderContainer = el)}\n    ></div>\n  );\n};\n"],"names":["GeoapifyApiKey","React","createContext","GeoapifyContext","props","Provider","value","apiKey","children","GeoapifyGeocoderAutocomplete","placeholderValue","placeholder","typeValue","type","langValue","lang","limitValue","limit","valueValue","filterByCountryCodeValue","filterByCountryCode","filterByCircleValue","filterByCircle","filterByRectValue","filterByRect","biasByCountryCodeValue","biasByCountryCode","biasByCircleValue","biasByCircle","biasByRectValue","biasByRect","biasByProximityValue","biasByProximity","positionValue","position","countryCodesValue","countryCodes","skipIconsValue","skipIcons","skipDetailsValue","skipDetails","preprocessHookValue","preprocessHook","postprocessHookValue","postprocessHook","suggestionsFilterValue","suggestionsFilter","placeSelectCallback","placeSelect","suggestionsChangeCallback","suggestionsChange","useContext","geocoderContainer","initialized","geocoderAutocomplete","useRef","placeSelectCallbackRef","suggestionsChangeCallbackRef","current","onSelect","useCallback","onSuggestions","useEffect","off","GeocoderAutocomplete","on","setType","setLang","console","warn","addBiasByProximity","addFilterByCountry","setLimit","setValue","addFilterByCircle","addFilterByRect","addBiasByCountry","addBiasByCircle","addBiasByRect","setPreprocessHook","setPostprocessHook","setSuggestionsFilter","className","style","ref","el"],"mappings":"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"}