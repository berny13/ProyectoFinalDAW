{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\34644\\\\ProyectoFinalDAW\\\\mycovid19\\\\src\\\\Components\\\\datosAPI\\\\geoAPI.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Geoapi = () => {\n  _s();\n\n  const [accesoAPI, setAccesoAPI] = useState({\n    tipo: 'GET',\n    url: 'https://apiv1.geoapi.es/comunidades?type=JSON&key=&sandbox=1'\n  });\n  const [datos, setDatos] = useState({});\n  const [errorAPI, setErrorAPI] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [respuestaAPI, setRespuestaAPI] = useState({\n    respuesta: 'KO'\n  });\n  useEffect(() => {\n    const consultaAPI = async () => {\n      setErrorAPI(null);\n      setLoading(true);\n\n      try {\n        // 'data' son los datos que se envían como request body\n        // Solo es válido para 'PUT', 'POST', 'DELETE y 'PATCH'\n        const consulta = await axios({\n          method: accesoAPI.tipo,\n          url: accesoAPI.url,\n          data: datos\n        });\n        setRespuestaAPI(consulta);\n      } catch (error) {\n        setErrorAPI(error.response);\n      }\n\n      setLoading(false);\n    };\n\n    consultaAPI();\n  }, [accesoAPI.tipo, accesoAPI.url, datos]);\n\n  const handleClick = boton => {\n    if (boton === 'botonGet') {\n      setAccesoAPI({\n        tipo: 'GET',\n        url: 'http://localhost:5000/api/v1/consulta-get-dos'\n      }); // En un GET los datos serán ignorados, siempre mandaremos un objeto vacío\n\n      setDatos({});\n    } else if (boton === 'botonPost') {\n      setAccesoAPI({\n        tipo: 'POST',\n        url: 'http://localhost:5000/api/v1/consulta-post'\n      });\n      setDatos({\n        datosUno: 'datosUno',\n        datosDos: 'datosDos'\n      });\n    }\n  };\n\n  const MostrarRespuesta = () => {\n    if (loading === true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Cargando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }, this);\n    }\n\n    let respuesta = {};\n\n    if (errorAPI) {\n      respuesta = errorAPI;\n    } else {\n      respuesta = respuestaAPI;\n    }\n\n    return Object.keys(respuesta).map(key => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [key, \": \", JSON.stringify(respuesta[key])]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('botonGet'),\n        type: \"button\",\n        children: \"Consulta GET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('botonPost'),\n        type: \"button\",\n        children: \"Consulta POST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MostrarRespuesta, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Geoapi, \"acMa3G2gKUUSDB7pEh7kcJCdRmY=\");\n\n_c = Geoapi;\nexport default Geoapi;\n\nvar _c;\n\n$RefreshReg$(_c, \"Geoapi\");","map":{"version":3,"sources":["C:/Users/34644/ProyectoFinalDAW/mycovid19/src/Components/datosAPI/geoAPI.js"],"names":["React","useEffect","useState","axios","Geoapi","accesoAPI","setAccesoAPI","tipo","url","datos","setDatos","errorAPI","setErrorAPI","loading","setLoading","respuestaAPI","setRespuestaAPI","respuesta","consultaAPI","consulta","method","data","error","response","handleClick","boton","datosUno","datosDos","MostrarRespuesta","Object","keys","map","key","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst Geoapi = () => {\r\n    \r\n    const [accesoAPI, setAccesoAPI] = useState({ tipo: 'GET', url: 'https://apiv1.geoapi.es/comunidades?type=JSON&key=&sandbox=1' });\r\n    const [datos, setDatos] = useState({});\r\n    const [errorAPI, setErrorAPI] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [respuestaAPI, setRespuestaAPI] = useState({ respuesta: 'KO' });\r\n   \r\n    useEffect(() => {\r\n      const consultaAPI = async () => {\r\n        setErrorAPI(null);\r\n        setLoading(true);\r\n   \r\n        try {\r\n          // 'data' son los datos que se envían como request body\r\n          // Solo es válido para 'PUT', 'POST', 'DELETE y 'PATCH'\r\n          const consulta = await axios({ method: accesoAPI.tipo, url: accesoAPI.url, data: datos });\r\n   \r\n          setRespuestaAPI(consulta);\r\n        } catch (error) {\r\n          setErrorAPI(error.response);\r\n        }\r\n   \r\n        setLoading(false);\r\n      };\r\n   \r\n      consultaAPI();\r\n    }, [accesoAPI.tipo, accesoAPI.url, datos]);\r\n   \r\n    const handleClick = boton => {\r\n      if (boton === 'botonGet') {\r\n        setAccesoAPI({ tipo: 'GET', url: 'http://localhost:5000/api/v1/consulta-get-dos' });\r\n   \r\n        // En un GET los datos serán ignorados, siempre mandaremos un objeto vacío\r\n        setDatos({});\r\n      } else if (boton === 'botonPost') {\r\n        setAccesoAPI({ tipo: 'POST', url: 'http://localhost:5000/api/v1/consulta-post' });\r\n   \r\n        setDatos({ datosUno: 'datosUno', datosDos: 'datosDos' });\r\n      }\r\n    };\r\n   \r\n    const MostrarRespuesta = () => {\r\n      if (loading === true) {\r\n        return <div>Cargando...</div>;\r\n      }\r\n   \r\n      let respuesta = {};\r\n   \r\n      if (errorAPI) {\r\n        respuesta = errorAPI;\r\n      } else {\r\n        respuesta = respuestaAPI;\r\n      }\r\n   \r\n      return Object.keys(respuesta).map(key => {\r\n        return (\r\n          <div key={key}>\r\n            {key}: {JSON.stringify(respuesta[key])}\r\n          </div>\r\n        );\r\n      });\r\n    };\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <button onClick={() => handleClick('botonGet')} type=\"button\">Consulta GET</button>\r\n        <button onClick={() => handleClick('botonPost')} type=\"button\">Consulta POST</button>\r\n      </div>\r\n      <div>\r\n        <MostrarRespuesta />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default Geoapi\r\n"]},"metadata":{},"sourceType":"module"}