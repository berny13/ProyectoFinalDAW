{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport { GeocoderAutocomplete } from '@geoapify/geocoder-autocomplete';\nvar GeoapifyApiKey = React.createContext(\"\");\n\nvar GeoapifyContext = function GeoapifyContext(props) {\n  return React.createElement(GeoapifyApiKey.Provider, {\n    value: props.apiKey\n  }, props.children);\n};\n\nvar GeoapifyGeocoderAutocomplete = function GeoapifyGeocoderAutocomplete(_ref) {\n  var placeholderValue = _ref.placeholder,\n      typeValue = _ref.type,\n      langValue = _ref.lang,\n      limitValue = _ref.limit,\n      valueValue = _ref.value,\n      filterByCountryCodeValue = _ref.filterByCountryCode,\n      filterByCircleValue = _ref.filterByCircle,\n      filterByRectValue = _ref.filterByRect,\n      biasByCountryCodeValue = _ref.biasByCountryCode,\n      biasByCircleValue = _ref.biasByCircle,\n      biasByRectValue = _ref.biasByRect,\n      biasByProximityValue = _ref.biasByProximity,\n      positionValue = _ref.position,\n      countryCodesValue = _ref.countryCodes,\n      skipIconsValue = _ref.skipIcons,\n      skipDetailsValue = _ref.skipDetails,\n      preprocessHookValue = _ref.preprocessHook,\n      postprocessHookValue = _ref.postprocessHook,\n      suggestionsFilterValue = _ref.suggestionsFilter,\n      placeSelectCallback = _ref.placeSelect,\n      suggestionsChangeCallback = _ref.suggestionsChange;\n  var apiKey = React.useContext(GeoapifyApiKey);\n  var geocoderContainer;\n  var initialized = false;\n  var geocoderAutocomplete = useRef();\n  var placeSelectCallbackRef = useRef();\n  var suggestionsChangeCallbackRef = useRef();\n  placeSelectCallbackRef.current = placeSelectCallback;\n  suggestionsChangeCallbackRef.current = suggestionsChangeCallback;\n  var onSelect = React.useCallback(function (value) {\n    if (placeSelectCallbackRef.current) {\n      placeSelectCallbackRef.current(value);\n    }\n  }, []);\n  var onSuggestions = React.useCallback(function (value) {\n    if (suggestionsChangeCallbackRef.current) {\n      suggestionsChangeCallbackRef.current(value);\n    }\n  }, []);\n  useEffect(function () {\n    if (initialized) {\n      if (geocoderAutocomplete.current) {\n        geocoderAutocomplete.current.off(\"select\", onSelect);\n        geocoderAutocomplete.current.off(\"suggestions\", onSuggestions);\n      }\n\n      return;\n    }\n\n    initialized = true;\n    geocoderAutocomplete.current = new GeocoderAutocomplete(geocoderContainer, apiKey, {\n      placeholder: placeholderValue || \"\",\n      skipDetails: skipDetailsValue,\n      skipIcons: skipIconsValue\n    });\n    geocoderAutocomplete.current.on(\"select\", onSelect);\n    geocoderAutocomplete.current.on(\"suggestions\", onSuggestions);\n  }, []);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setType(typeValue);\n    }\n  }, [typeValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLang(langValue);\n    }\n  }, [langValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      console.warn(\"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\");\n      geocoderAutocomplete.current.addBiasByProximity(positionValue);\n    }\n  }, [positionValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      console.warn(\"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\");\n      geocoderAutocomplete.current.addFilterByCountry(countryCodesValue);\n    }\n  }, [countryCodesValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLimit(limitValue);\n    }\n  }, [limitValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setValue(valueValue || \"\");\n    }\n  }, [valueValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCountry(filterByCountryCodeValue);\n    }\n  }, [filterByCountryCodeValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCircle(filterByCircleValue);\n    }\n  }, [filterByCircleValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByRect(filterByRectValue);\n    }\n  }, [filterByRectValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCountry(biasByCountryCodeValue);\n    }\n  }, [biasByCountryCodeValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCircle(biasByCircleValue);\n    }\n  }, [biasByCircleValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByRect(biasByRectValue);\n    }\n  }, [biasByRectValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByProximity(biasByProximityValue);\n    }\n  }, [biasByProximityValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPreprocessHook(preprocessHookValue);\n    }\n  }, [preprocessHookValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPostprocessHook(postprocessHookValue);\n    }\n  }, [postprocessHookValue]);\n  useEffect(function () {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setSuggestionsFilter(suggestionsFilterValue);\n    }\n  }, [suggestionsFilterValue]);\n  return React.createElement(\"div\", {\n    className: \"geocoder-container\",\n    style: {\n      position: \"relative\"\n    },\n    ref: function ref(el) {\n      return geocoderContainer = el;\n    }\n  });\n};\n\nexport { GeoapifyApiKey, GeoapifyContext, GeoapifyGeocoderAutocomplete };","map":{"version":3,"sources":["../src/index.tsx"],"names":["GeoapifyApiKey","React","GeoapifyContext","value","props","apiKey","GeoapifyGeocoderAutocomplete","placeholder","placeholderValue","type","typeValue","lang","langValue","limit","limitValue","valueValue","filterByCountryCode","filterByCountryCodeValue","filterByCircle","filterByCircleValue","filterByRect","filterByRectValue","biasByCountryCode","biasByCountryCodeValue","biasByCircle","biasByCircleValue","biasByRect","biasByRectValue","biasByProximity","biasByProximityValue","position","positionValue","countryCodes","countryCodesValue","skipIcons","skipIconsValue","skipDetails","skipDetailsValue","preprocessHook","preprocessHookValue","postprocessHook","postprocessHookValue","suggestionsFilter","suggestionsFilterValue","placeSelect","placeSelectCallback","suggestionsChange","suggestionsChangeCallback","initialized","geocoderAutocomplete","useRef","placeSelectCallbackRef","suggestionsChangeCallbackRef","onSelect","onSuggestions","useEffect","console","className","style","ref","geocoderContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, MutableRefObject } from \"react\";\nimport {\n  GeocoderAutocomplete,\n  LocationType,\n  SupportedLanguage,\n  GeoPosition,\n  CountyCode,\n  ByCountryCodeOptions,\n  ByCircleOptions,\n  ByRectOptions,\n  ByProximityOptions,\n} from \"@geoapify/geocoder-autocomplete\";\n\nexport const GeoapifyApiKey = React.createContext<string>(\"\");\n\nexport const GeoapifyContext = (props: any) => {\n  return (\n    <GeoapifyApiKey.Provider value={props.apiKey}>\n      {props.children}\n    </GeoapifyApiKey.Provider>\n  );\n};\n\nexport interface GeoapifyGeocoderAutocompleteOptions {\n  value?: string;\n  type?: LocationType;\n  lang?: SupportedLanguage;\n  limit?: number;\n  placeholder?: string;\n  filterByCountryCode?: ByCountryCodeOptions;\n  filterByCircle?: ByCircleOptions;\n  filterByRect?: ByRectOptions;\n  biasByCountryCode?: ByCountryCodeOptions;\n  biasByCircle?: ByCircleOptions;\n  biasByRect?: ByRectOptions;\n  biasByProximity?: ByProximityOptions;\n  position?: GeoPosition;\n  countryCodes?: CountyCode[];\n\n  skipIcons?: boolean;\n  skipDetails?: boolean;\n\n  placeSelect: (value: any) => {};\n  suggestionsChange: (value: any) => {};\n\n  preprocessHook: (value: string) => string;\n  postprocessHook: (feature: any) => string;\n  suggestionsFilter: (suggestions: any[]) => any[];\n}\n\nexport const GeoapifyGeocoderAutocomplete = ({\n  placeholder: placeholderValue,\n  type: typeValue,\n  lang: langValue,\n  limit: limitValue,\n  value: valueValue,\n  filterByCountryCode: filterByCountryCodeValue,\n  filterByCircle: filterByCircleValue,\n  filterByRect: filterByRectValue,\n  biasByCountryCode: biasByCountryCodeValue,\n  biasByCircle: biasByCircleValue,\n  biasByRect: biasByRectValue,\n  biasByProximity: biasByProximityValue,\n  position: positionValue,\n  countryCodes: countryCodesValue,\n  skipIcons: skipIconsValue,\n  skipDetails: skipDetailsValue,\n  preprocessHook: preprocessHookValue,\n  postprocessHook: postprocessHookValue,\n  suggestionsFilter: suggestionsFilterValue,\n  placeSelect: placeSelectCallback,\n  suggestionsChange: suggestionsChangeCallback,\n}: GeoapifyGeocoderAutocompleteOptions) => {\n  const apiKey = React.useContext<string>(GeoapifyApiKey);\n  let geocoderContainer: HTMLDivElement | null;\n  let initialized: boolean = false;\n  let geocoderAutocomplete: MutableRefObject<\n    GeocoderAutocomplete | undefined\n  > = useRef<GeocoderAutocomplete>();\n\n  const placeSelectCallbackRef: MutableRefObject<\n    ((value: any) => {}) | undefined\n  > = useRef<(value: any) => {}>();\n  const suggestionsChangeCallbackRef: MutableRefObject<\n    ((value: any) => {}) | undefined\n  > = useRef<(value: any) => {}>();\n\n  placeSelectCallbackRef.current = placeSelectCallback;\n  suggestionsChangeCallbackRef.current =  suggestionsChangeCallback;\n\n  const onSelect = React.useCallback((value: any) => {\n    if (placeSelectCallbackRef.current) {\n      placeSelectCallbackRef.current(value);\n    }\n  },[]);\n\n  const onSuggestions = React.useCallback((value: any) => {\n    if (suggestionsChangeCallbackRef.current) {\n      suggestionsChangeCallbackRef.current(value);\n    }\n  },[]);\n\n  useEffect(() => {\n    if (initialized) {\n      if (geocoderAutocomplete.current) {\n        geocoderAutocomplete.current.off(\"select\", onSelect);\n        geocoderAutocomplete.current.off(\"suggestions\", onSuggestions);\n      }\n\n      return;\n    }\n\n    initialized = true;\n\n    geocoderAutocomplete.current = new GeocoderAutocomplete(\n      geocoderContainer as HTMLDivElement,\n      apiKey,\n      {\n        placeholder: placeholderValue || \"\",\n        skipDetails: skipDetailsValue,\n        skipIcons: skipIconsValue\n      }\n    );\n\n    geocoderAutocomplete.current.on(\"select\", onSelect);\n    geocoderAutocomplete.current.on(\"suggestions\", onSuggestions);\n  }, []);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setType(typeValue as LocationType);\n    }\n  }, [typeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLang(langValue as SupportedLanguage);\n    }\n  }, [langValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      console.warn(\n        \"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\"\n      );\n      geocoderAutocomplete.current.addBiasByProximity(\n        positionValue as GeoPosition\n      );\n    }\n  }, [positionValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      console.warn(\n        \"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\"\n      );\n      geocoderAutocomplete.current.addFilterByCountry(\n        countryCodesValue as CountyCode[]\n      );\n    }\n  }, [countryCodesValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setLimit(limitValue as number);\n    }\n  }, [limitValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setValue((valueValue as string) || \"\");\n    }\n  }, [valueValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCountry(\n        filterByCountryCodeValue as ByCountryCodeOptions\n      );\n    }\n  }, [filterByCountryCodeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByCircle(\n        filterByCircleValue as ByCircleOptions\n      );\n    }\n  }, [filterByCircleValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addFilterByRect(\n        filterByRectValue as ByRectOptions\n      );\n    }\n  }, [filterByRectValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCountry(\n        biasByCountryCodeValue as ByCountryCodeOptions\n      );\n    }\n  }, [biasByCountryCodeValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByCircle(\n        biasByCircleValue as ByCircleOptions\n      );\n    }\n  }, [biasByCircleValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByRect(\n        biasByRectValue as ByRectOptions\n      );\n    }\n  }, [biasByRectValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.addBiasByProximity(\n        biasByProximityValue as ByProximityOptions\n      );\n    }\n  }, [biasByProximityValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPreprocessHook(\n        preprocessHookValue\n      );\n    }\n  }, [preprocessHookValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setPostprocessHook(\n        postprocessHookValue\n      );\n    }\n  }, [postprocessHookValue]);\n\n  useEffect(() => {\n    if (geocoderAutocomplete.current) {\n      geocoderAutocomplete.current.setSuggestionsFilter(\n        suggestionsFilterValue\n      );\n    }\n  }, [suggestionsFilterValue]);\n\n  return (\n    <div\n      className=\"geocoder-container\"\n      style={{ position: \"relative\" }}\n      ref={(el) => (geocoderContainer = el)}\n    ></div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}